- name: Enable cgroup_memory=1 cgroup_enable=memory
  become: true
  lineinfile:
    path: /boot/cmdline.txt
    state: present
    backrefs: yes
    regexp: "(.*rootwait)"
    line: '\1 cgroup_memory=1 cgroup_enable=memory'
  notify: Reboot the Machine

- name: Set Current IP as Static
  become: true
  lineinfile:
    path: /etc/dhcpcd.conf
    state: present
    insertafter: "{{ item.after }}"
    line: "{{ item.to }}"
  loop:
    - {
        after: "# Static IP Config for Eth0",
        to: "# Static IP Config for Eth0",
      }
    - { after: "# Static IP Config for Eth0", to: "interface eth0" }
    - {
        after: "interface eth0",
        to: "static domain_name_servers={{ k3s.static.dns }}",
      }
    - { after: "interface eth0", to: "static routers={{ k3s.static.router }}" }
    - { after: "interface eth0", to: "static ip_address={{ k3sIP }}" }
  notify: Reboot the Machine

- name: Set Hostname
  become: true
  hostname:
    name: "{{ hostname }}"
  notify: Reboot the Machine

- name: Update /etc/hosts
  become: true
  lineinfile:
    path: /etc/hosts
    regexp: '^127\.0\.1\.1'
    line: 127.0.1.1   {{ hostname }}
  notify: Reboot the Machine

- name: Use Legacy IPtables
  become: true
  alternatives:
    name: "{{ item.name }}"
    path: "{{ item.path }}"
  loop:
    - { name: "iptables", path: "/usr/sbin/iptables-legacy" }
    - { name: "ip6tables", path: "/usr/sbin/ip6tables-legacy" }
  notify: Reboot the Machine

- name: Flush Handlers
  meta: flush_handlers
  args:
    warn: false

- name: Download K3S installer
  get_url:
    url: "{{ k3s.url }}"
    dest: "{{ k3s.tmpfile }}"
    mode: "0777"

# TODO: Fix this --
# [WARNING]: Module remote_tmp /tmp/.ansible/tmp did not exist and was created with a mode of 0700, this may cause issues when running as another user. To avoid this, create the remote_tmp dir with the correct
# permissions manually

# TODO: Make K3S Args configurable
- name: Execute the K3S Installer
  shell: "{{ k3s.tmpfile }} --no-deploy servicelb --no-deploy traefik"
  when: "'k3sAdmins' is in group_names"

- name: Get K3S Kubeconfig
  become: true
  run_once: true
  fetch:
    src: "{{ k3s.kubeconfig }}"
    dest: "{{ k3s.local_kubeconfig }}"
    flat: yes
  when: "'k3sAdmins' is in group_names"
  tags:
    - get-kubeconfig

- name: Update Local Kubeconfig
  delegate_to: localhost
  run_once: true
  replace:
    path: "{{ k3s.local_kubeconfig}}"
    regexp: '127\.0\.0\.1'
    replace: "{{ hostvars[groups['k3sAdmins'][0]]['ansible_eth0']['ipv4']['address'] }}"
  tags:
    - get-kubeconfig

- name: Get K3S Node Token
  become: true
  run_once: true
  delegate_to: "{{ groups['k3sAdmins'][0] }}"
  shell: cat {{ k3s.nodetoken }}
  register: nodetoken

# - name: Debug Node Token
#   debug:
#     msg: "{{ nodetoken.stdout }}"

- name: Join K3s Cluster as Node
  shell: |
    export K3S_URL=https://{{ hostvars[groups['k3sAdmins'][0]]['ansible_eth0']['ipv4']['address'] }}:6443
    export K3S_TOKEN={{ nodetoken.stdout }}
    {{ k3s.tmpfile }}
  when: "'k3sNodes' is in group_names"

- name: Remove the K3S Installer
  file:
    path: "{{ k3s.tmpfile }}"
    state: absent
